name: CI Pipeline Backend
run-name: "Triggered by @${{ github.actor }} on ${{ github.repository }} [${{ github.ref_name }}] - ${{ github.event_name }}"

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - 'api/**'
      - 'db/**'

jobs:
    gitleaks:
      runs-on: ubuntu-latest
      steps:
        - name: Get the repo
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Run the gitleaks
          uses: gitleaks/gitleaks-action@v2
          env:
            GITHUB_TOKEN: ${{ github.token }}

    unit-tests:
      runs-on: ubuntu-latest
      needs: [gitleaks]
      steps:
        - name: Get the repo
          uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
              python-version: '3.13.1'
              cache: 'pip'
        - run: pip install -r ./api/requirements.txt

        - name: Run the unit tests
          run: python -m unittest discover -s ./api/tests -p '*_test.py'

    sonarqube:
      runs-on: ubuntu-latest
      needs: [unit-tests]
      steps:
        - name: Get the repo
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        # Triggering SonarQube analysis as results of it are required by Quality Gate check.
        - name: SonarQube Server Scan
          uses: sonarsource/sonarqube-scan-action@master
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

        # Check the Quality Gate status.
        - name: SonarQube Server Quality Gate check
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
            pollingTimeoutSec: 600
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

        - run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

        - name: Quality Gate status check
          run: |
            if [[ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED" ]]; then
              echo "Quality Gate failed"
              exit 1
            fi

    snyk:
      runs-on: ubuntu-latest
      needs: [unit-tests]
      steps:
        - name: Get the repo
          uses: actions/checkout@v4

        - name: Workaround so it actually finds the requirements.txt
          run: cp -p ./api/requirements.txt ./requirements.txt

        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/python@master
          env:
              SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: --severity-threshold=high --file=api/requirements.txt --package-manager=pip --command=python3